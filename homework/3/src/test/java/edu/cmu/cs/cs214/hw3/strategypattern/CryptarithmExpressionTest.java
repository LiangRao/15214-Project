package edu.cmu.cs.cs214.hw3.strategypattern;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import edu.cmu.cs.cs214.hw2.expression.VariableExpression;

/**
 * The test for CryptarithmExpression class
 * 
 * @author raoliang
 *
 */
public class CryptarithmExpressionTest {
	private CryptarithmExpression crypExpression;
	private CryptarithmExpression crypExpression2;
	private CryptarithmExpression crypExpression3;
	private CryptarithmExpression expression1;
	private CryptarithmExpression expression2;
	private CryptarithmExpression expression3;
	private CryptarithmExpression expression4;

	/**
	 * Called before each test case method
	 * 
	 * @throws Exception
	 *             the exception when method is fail
	 */
	@Before
	public void setUp() throws Exception {
		String[] crypExpr = { "SEND", "+", "MORE", "=", "MONEY", "*", "ME" };
		String[] crypExpr1 = { "SE", "+", "MO", "*", "ND", "-", "RE", "=", "MO", "*", "ME", "+", "N", "-", "EY" };
		crypExpression = new CryptarithmExpression(crypExpr);
		crypExpression2 = new CryptarithmExpression(crypExpr);
		crypExpression3 = new CryptarithmExpression(crypExpr1);

	}

	/**
	 * Called after each test case method.
	 * 
	 * @throws Exception
	 *             throw Exception when the method fail
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Testing the general data generated by crypExpression constructor is
	 * correct
	 */
	@Test
	public void test() {
		String[] firstLetters = crypExpression.getFirstLetters();
		String[] except = { "S", "M" };
		assertArrayEquals(except, firstLetters);
		List<String> letters = new ArrayList<String>();
		letters.add("S");
		letters.add("E");
		letters.add("N");
		letters.add("D");
		letters.add("M");
		letters.add("O");
		letters.add("R");
		letters.add("Y");
		List<String> letterList = crypExpression.getLettersList();
		assertEquals(letters, letterList);

		Map<String, VariableExpression> lettersMap = crypExpression.getLetters();
		String s = "S";

		assertTrue(s.equals(lettersMap.get("S").name()));
	}

	/**
	 * Testing leftExpression() can return a correct Expression
	 */
	@Test
	public void testLeftExp() {
		String leftExp = crypExpression3.leftExpression().toString();
		assertTrue(leftExp.equals("(((((S*10.0)+(E*1.0))+((M*10.0)+(O*1.0)))*((N*10.0)+(D*1.0)))-((R*10.0)+(E*1.0)))"));
	}

	/**
	 * Testing rightExpression() can return a correct Expression
	 */
	@Test
	public void testRightExp() {
		String rightExp = crypExpression3.rightExpression().toString();
		String aString = "(((((E*10.0)+(Y*1.0))-(N*1.0))+((M*10.0)+(E*1.0)))*((M*10.0)+(O*1.0)))";
		assertTrue(rightExp.equals(aString));
	}

	/**
	 * Testing equal() can return true if the two CryptarithmExpressions are
	 * same with each other
	 */
	@Test
	public void testEqual() {
		assertTrue(crypExpression.equal(crypExpression2));
		assertFalse(crypExpression.equal(crypExpression3));
	}

	/**
	 * Testing the constructor will throw exception if there is illegal
	 * operators.
	 */
	@Test(expected = IllegalStateException.class)
	public void testLettersNum() {
		String[] temp = { "SEND", "#", "MORE", "=", "MONEY" };
		expression1 = new CryptarithmExpression(temp);
	}

	/**
	 * Testing the constructor will throw exception if there is illegal
	 * characters.
	 */
	@Test(expected = IllegalStateException.class)
	public void testCharLegal() {
		String[] temp = { "SEND1", "+", "MORE", "=", "MONEY" };
		expression2 = new CryptarithmExpression(temp);
	}

	/**
	 * Testing the constructor will throw exception if the total letters of a
	 * CryptarithmExpression are larger than 10
	 */
	@Test(expected = IllegalStateException.class)
	public void testHaveEquation() {
		String[] temp = { "SEND", "+", "MORE", "=", "GHYTGFIO" };
		expression3 = new CryptarithmExpression(temp);
	}

	/**
	 * Testing the constructor will throw exception if the total letters of a
	 * CryptarithmExpression are larger than 10
	 */
	@Test(expected = IllegalStateException.class)
	public void testOperatorVaild() {
		String[] temp = { "SEND", "=", "MORE", "=", "MONEY" };
		expression4 = new CryptarithmExpression(temp);
	}
}
